/*
Given an integer array, find a subarray where the sum of numbers is zero. Your code should return the index of the first number and the index of the last number.

 Notice

There is at least one subarray that it's sum equals to zero.

Example
Given [-3, 1, 2, -3, 4], return [0, 2] or [1, 3].
/*

/*
Method
-3 1 2 -3 4 转换成和数组 就是-3 -2 0 -3 1  肯定是需要找3 但是还要找两个相等的 
比如这里就有两个-3 第一个-3的意思是 前一个元素和-3 第二个-3意思是前4个和也是-3 所以 从第二个（不包括第一个）到第四个的和就是-3 - -3 = 0
这里要给Map -1的位置搞一个0 否则做出来就不对了
/*

public class Solution {
    /**
     * @param nums: A list of integers
     * @return: A list of integers includes the index of the first number 
     *          and the index of the last number
     */
    public ArrayList<Integer> subarraySum(int[] nums) {
        // write your code here
        ArrayList<Integer> res = new ArrayList<Integer>();
        if(nums == null){
            return res;
        }
        HashMap<Integer, Integer> map = new HashMap<>();
        
        map.put(0, -1);
         
        int sum = 0;
        for(int i = 0; i < nums.length; i++){
            sum += nums[i];
            if(map.containsKey(sum)){
               res.add(map.get(sum) + 1);
               res.add(i);
               return res;
            }
            map.put(sum, i);
            
        }
        return res;
    }
}



