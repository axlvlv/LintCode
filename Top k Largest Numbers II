Implement a data structure, provide two interfaces:

add(number). Add a new number in the data structure.
topk(). Return the top k largest numbers in this data structure. k is given when we create the data structure.
Have you met this question in a real interview? Yes
Example
s = new Solution(3);
>> create a new data structure.
s.add(3)
s.add(10)
s.topk()
>> return [10, 3]
s.add(1000)
s.add(-99)
s.topk()
>> return [1000, 10, 3]
s.add(4)
s.topk()
>> return [1000, 10, 4]
s.add(100)
s.topk()
>> return [1000, 100, 10]

public class Solution {
    private int maxsize;
    private PriorityQueue<Integer> p;

    public Solution(int k) {
        // initialize your data structure here.
        maxsize = k;
        p =  new PriorityQueue<>();
    }

    public void add(int num) {
        // Write your code here
        if(p.size() < maxsize){
            p.add(num);
        }else{
            if(num > p.peek()){
                p.poll();
                p.add(num);
            }
        }
    }

    public List<Integer> topk() {
        // Write your code here
        Iterator it = p.iterator();
        List<Integer> res = new ArrayList<>();
        while(it.hasNext()){
            res.add((Integer)it.next());
        }
        Collections.sort(res, Collections.reverseOrder());
        return res;
    }
};
